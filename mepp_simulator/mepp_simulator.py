# -*- coding: utf-8 -*-
"""
Created on Fri Oct 02 12:23:06 2015

@author: George Dickinson
"""
import numpy as np
import os
from qtpy.QtCore import Signal
from qtpy.QtGui import *
from qtpy.QtWidgets import *
from qtpy.QtCore import *
import inspect
import numpy.random as random
import shutil
from distutils.version import StrictVersion
from copy import deepcopy
import pyqtgraph as pg
from matplotlib import pyplot as plt 
import csv 
import math

import flika
try:
    flika_version = flika.__version__
except AttributeError:
    flika_version = '0.0.0'
if StrictVersion(flika_version) < StrictVersion('0.1.0'):
    import global_vars as g
    from window import Window
    from process.file_ import close
    import tifffile
    from process.filters import gaussian_blur
    from process.binary import threshold
    from process.roi import set_value
    from roi import makeROI
    from process.BaseProcess import SliderLabel, BaseProcess_noPriorWindow, FileSelector


else:
    from flika import global_vars as g
    from flika.window import Window
    from flika.process.file_ import close
    from flika.process.filters import gaussian_blur
    from flika.process.binary import threshold
    from flika.process.roi import set_value
    from flika.roi import makeROI
    from flika.utils.io import tifffile

    if StrictVersion(flika_version) < StrictVersion('0.2.23'):
        from flika.process.BaseProcess import SliderLabel, BaseProcess_noPriorWindow, FileSelector, CheckBox
    else:
        from flika.utils.BaseProcess import SliderLabel, BaseProcess_noPriorWindow, FileSelector, CheckBox


cwd = os.path.dirname(os.path.abspath(__file__)) # cwd=r'C:\Users\Kyle Ellefsen\Documents\GitHub\Flika\plugins\mepp_simulator'

class PlotWindow(BaseProcess_noPriorWindow):
    def __init__(self, title):  
        self.win = pg.GraphicsWindow(title="MEPP Generator")
        self.win.resize(1000,600)
        self.win.setWindowTitle('MEPP Generator')
        self.p1 = self.win.addPlot(title=title)
        self.curve = self.p1.plot(pen='y')
        self.curve.setData(y=np.zeros(1000))
        self.p1.enableAutoRange('xy', False) 
   
    def update(self,data, xRange, yRange):
        #xRange and yRange are lists [start,end]
        self.curve.setData(data)
        self.p1.setRange(xRange=xRange, yRange=yRange)  
        
    def show(self):
        self.win.show()
    
    def hide(self):
        self.win.hide()
    
class Simulate_mepp(BaseProcess_noPriorWindow):
    """
    Simulate MEPP events in a noisy time trace
    
    Trace generated by linear summation of randomly occuring unitary events hF(t) (MEPPs)
    see Segal et al. Biophys J, 1985
    
    h = time independent amplitude factor
    F(t) = nondimensional function of time
    hF(t) = h(exp(-t/dT) - exp(-t/dR))

    dT = decay time constant
    rT = rise time constant

    time of MEPP addition drawn from exponential distribution (np.random.exponential())
    amplitude of MEPP drawn from normal distribution (np.random.normal())
    duration of MEPP drawn from normal distribution (np.random.normal()) 
        
    """
    def __init__(self):
        
        if g.settings['mepp_simulator'] is None or 'decayTime' not in g.settings['mepp_simulator']:
            s = dict()
            s['traceLength'] = 10000
            s['meppAmplitude'] = 5
            s['meppDuration'] = 1        
            s['startTime'] = 0
            s['meanExp'] = 1000.0
            s['baseline'] = 0.0
            s['noiseSigma'] = 0.1
            s['riseTime'] = 1.0
            #s['riseTime_sigma'] = 0.01        
            s['decayTime'] = 10.0
            #s['decayTime_sigma'] = 0.1  
            g.settings['mepp_simulator'] = s
        super().__init__()
        
        self.data = np.array([])


    def gui(self):
        s=g.settings['mepp_simulator']
        self.gui_reset()
        self.meppWindow = PlotWindow('Single MEPP (No noise)')
        self.traceWindow = PlotWindow('Time Trace')
        self.meppWindow.hide()
        self.traceWindow.hide()        
        
        self.traceLength = SliderLabel(0)
        self.traceLength.setRange(0,1000000)
        self.traceLength.setValue(s['traceLength'])        
        
        self.startTime = SliderLabel(0)
        self.startTime.setRange(0,s['traceLength'])  
        self.startTime.setValue(s['startTime'])

        self.meppDuration_slider = pg.SpinBox(int=True, step=1)
        self.meppDuration_slider.setValue(s['meppDuration'])
        
        self.meppDuration_sigma_slider = pg.SpinBox(int=True, step=1)
        self.meppDuration_sigma_slider.setValue(1)        

        self.baseline_slider = pg.SpinBox(int=False, step=.01)
        self.baseline_slider.setValue(s['baseline'])
        
        self.noiseSigma_slider = pg.SpinBox(int=False, step=.01)
        self.noiseSigma_slider.setValue(s['noiseSigma'])                
        
        self.meppAmplitude_slider = pg.SpinBox(int=False, step=.01)
        self.meppAmplitude_slider.setValue(s['meppAmplitude'])  
        
        self.meppAmplitude_sigma_slider = pg.SpinBox(int=False, step=.01)
        self.meppAmplitude_sigma_slider.setValue(1.0)         

        self.meppRiseTime_slider = pg.SpinBox(int=False, step=.01)
        self.meppRiseTime_slider.setValue(s['riseTime']) 
        
        #self.meppRiseTime_sigma_slider = pg.SpinBox(int=False, step=.01)
        #self.meppRiseTime_sigma_slider.setValue(0.01) 

        self.meppDecayTime_slider = pg.SpinBox(int=False, step=.01)
        self.meppDecayTime_slider.setValue(s['decayTime']) 
        
        #self.meppDecayTime_sigma_slider = pg.SpinBox(int=False, step=.01)
        #self.meppDecayTime_sigma_slider.setValue(0.1) 
               
        self.randommeppsAdded = False     
        
        self.meanExp_slider = pg.SpinBox(int=False, step=.01)
        self.meanExp_slider.setValue(1000.0) 
        
        self.plotHistoTimes = CheckBox()
        self.plotHistoTimes.setValue(False)
        
        self.exportTimes_button = QPushButton('Export times')
        self.exportTimes_button.pressed.connect(self.exportTimes)  
        
        self.randommeppButton = QPushButton('Generate Trace')
        self.randommeppButton.pressed.connect(self.addRandommepps)          

        self.plotmeppButton = QPushButton('Plot single MEPP')
        self.plotmeppButton .pressed.connect(self.plotSingleMEPP) 

                    
        self.items.append({'name': 'traceLength','string':'Recording length','object':self.traceLength})
        self.items.append({'name': 'startTime','string':'Start time','object':self.startTime})  
        self.items.append({'name': 'meppDuration','string':'MEPP duration (mean)','object':self.meppDuration_slider}) 
        self.items.append({'name': 'meppDuration_sigma','string':'MEPP duration (standard deviation)','object':self.meppDuration_sigma_slider})          

        self.items.append({'name': 'riseTime','string':'MEPP rise time constant','object':self.meppRiseTime_slider})          
        #self.items.append({'name': 'riseTime_sigma','string':'MEPP rise time constant (standard deviation)','object':self.meppRiseTime_sigma_slider})          

        self.items.append({'name': 'decayTime','string':'MEPP decay time constant','object':self.meppDecayTime_slider})          
        #self.items.append({'name': 'decayTime_sigma','string':'MEPP decay time constant (standard deviation)','object':self.meppDecayTime_sigma_slider})          
        
        
        self.items.append({'name': 'meppAmplitude','string':'MEPP Amplitude (mean)','object':self.meppAmplitude_slider})  
        self.items.append({'name': 'meppAmplitude_sigma','string':'MEPP Amplitude (standard deviation)','object':self.meppAmplitude_sigma_slider})                    
        self.items.append({'name': 'meanExp', 'string': 'Mean of exponential distibution', 'object': self.meanExp_slider})  

        self.items.append({'name': 'baseline','string':'Baseline','object':self.baseline_slider})                     
        self.items.append({'name': 'noiseSigma', 'string': 'Noise Sigma', 'object': self.noiseSigma_slider})         
        
        self.items.append({'name': 'histoTimes', 'string': 'Plot histogram of mepp start times:', 'object': self.plotHistoTimes})
        self.items.append({'name': 'random_mepp_Button', 'string': 'Click to add randomly distibuted mepps', 'object': self.randommeppButton}) 
        self.items.append({'name': 'listTimes', 'string': 'Export list of mepp start times', 'object': self.exportTimes_button})          
        self.items.append({'name': 'plotMEPP', 'string': 'Plot single MEPP (without noise)', 'object': self.plotmeppButton}) 
        super().gui()

    def __call__(self, keepSourceWindow=False):
        g.settings['mepp_simulator']['traceLength']=self.getValue('traceLength')
        g.settings['mepp_simulator']['meppAmplitude']=self.getValue('meppAmplitude')
        g.settings['mepp_simulator']['meppDuration']=self.getValue('meppDuration')
        g.settings['mepp_simulator']['startTime'] = self.getValue('startTime')
        g.settings['mepp_simulator']['meanExp'] = self.getValue('meanExp')
        g.settings['mepp_simulator']['baseline'] = self.getValue('baseline')        
        g.settings['mepp_simulator']['noiseSigma'] = self.getValue('noiseSigma')
        g.settings['mepp_simulator']['riseTime'] = self.getValue('riseTime')
        g.settings['mepp_simulator']['decayTime'] = self.getValue('decayTime')

        return 


    def addMEPP(self, time, amplitude, duration, dT=10, rT=1):
        #using Segal et al. Biophys J, 1985 MINIATURE ENDPLATE POTENTIAL FREQUENCY AND AMPLITUDE DETERMINED BY AN EXTENSION OF CAMPBELL'S THEOREM
        #dT = decay time
        #rT = rise time              
        ampList = []        
        for t in range(0,duration) :
            ampList.append( amplitude*(math.exp(-t/dT) - math.exp(-t/rT)) )
                
        #square event test
        #self.data[time:time+duration] = self.data[time:time+duration] + amplitude
        
        #add MEPP to trace
        self.data[time:time+duration] = self.data[time:time+duration] + np.array(ampList)


    def plotSingleMEPP(self):
        amp = self.getValue('meppAmplitude')
        duration = self.getValue('meppDuration')
        dT = self.getValue('decayTime')
        rT = self.getValue('riseTime')       
        self.plotMEPP(amp,duration,dT=dT, rT=rT)

    def plotMEPP(self,amplitude,duration,dT=10,rT=1):
        ampList = []        
        for t in range(0,duration) :
            ampList.append( amplitude*(math.exp(-t/dT) - math.exp(-t/rT)) )  
        #plot matplot
        #plt.figure(3)
        #plt.plot(range(0,duration),ampList)
        #plt.show()
        #plot pg
        self.meppWindow.update(ampList,[0,len(ampList)],[0,self.getValue('meppAmplitude')])
        self.meppWindow.show()


    def addRandommepps(self):
        self.data = np.array([])
        
        #generate noisy time trace      
        n = int(self.getValue('traceLength')) 

        self.data = np.random.normal(self.getValue('baseline'), self.getValue('noiseSigma'), n)     
        
        #add MEPPS to trace
        mean = self.getValue('meanExp')       
        meppsAdded = 0
        meppsOutsideOfRange = 0
        self.timesAdded = []
        
        amp = self.getValue('meppAmplitude')
        duration = self.getValue('meppDuration')
        dT = self.getValue('decayTime')
        rT = self.getValue('riseTime')  
        
        # add first mepp
        try:
            time = int((np.random.exponential(scale=mean, size=1) + self.getValue('startTime')) )  
            #draw random amplitude
            randAmp = int(np.random.normal(amp, self.getValue('meppAmplitude_sigma'), 1))
            #draw random duration
            randDuration = int(np.random.normal(duration, self.getValue('meppDuration_sigma'), 1))
            # add MEPP
            self.addMEPP(time, randAmp, randDuration, dT=dT, rT=rT)
            #record time
            self.timesAdded.append(time)            
            meppsAdded +=1 
        except BaseException as e:
            #print(e)
            #meppsOutsideOfRange += 1 
            #print('{} MEPPs added, {} MEPPs out of time range'.format(meppsAdded,meppsOutsideOfRange))
            #print('1st MEPP outside of time range, aborting')
            pass
       
        # add mepp after each time selection untill end of stack
        # casting the exponential continous value as an int to select frame        
        while time < self.getValue('traceLength')-self.getValue('meppDuration'):
            try:
                time = int((time + np.random.exponential(scale=mean, size=1)))
                
                #draw random amplitude
                randAmp = int(np.random.normal(amp, self.getValue('meppAmplitude_sigma'), 1))
                #draw random duration
                randDuration = int(np.random.normal(duration, self.getValue('meppDuration_sigma'), 1))
                # add MEPP
                self.addMEPP(time, randAmp, randDuration, dT=dT, rT=rT)
                #record time
                self.timesAdded.append(time)            
                meppsAdded +=1 
            except BaseException as e:
                #print(e)
                meppsOutsideOfRange += 1    
        
        #print number of MEPPS added to console
        #print('{} MEPPs added, {} MEPPs out of time range'.format(meppsAdded,meppsOutsideOfRange))
        
        if self.plotHistoTimes.isChecked():
            plt.figure(1)
            plt.hist(self.timesAdded)
            plt.xlabel('Time MEPP added')
            plt.ylabel('Number of MEPPs added')
            plt.show()

        self.randommeppsAdded = True
        
        #print data to console
        #print(self.data)
        
        #plot data matplotlib
        #plt.figure(0)
        #plt.plot(self.data)
        #plt.show()
        
        #plot data pg
        self.traceWindow.update(self.data,[0,len(self.data)],[self.getValue('baseline')-(3*self.getValue('noiseSigma')),self.getValue('meppAmplitude')+(3*self.getValue('meppAmplitude_sigma'))])
        self.traceWindow.show()
        return


    def exportTimes(self):        
        if self.randommeppsAdded == False:
            g.alert('Add MEPPs first')
            return
        
        #set export path
        savePath, _ = QFileDialog.getSaveFileName(None, "Save file","","Text Files (*.csv)")        

        #write file
        try:
            # opening the csv file in 'w+' mode 
            file = open(savePath, 'w+', newline ='') 
              
            # writing the data into the file 
            with file:     
                write = csv.writer(file) 
                write.writerows(map(lambda x: [x], self.timesAdded)) 
            
            print('List of times saved to: {}'.format(savePath))
        except BaseException as e:
            print(e)
            print('Export of times failed, printing times to console')
            print(self.timesAdded)

simulate_mepp = Simulate_mepp()
